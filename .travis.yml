language: node_js
"-node_js":
- v12.15.0
cache:
  directories:
  - node_modules
addons:
  ssh_known_hosts: $REMOTE_SERVER

before_install:
jobs:
  include:
    - stage: development
      if: branch = developer
      script:
        - npm run build
        - docker build -t $DOCKER_USERNAME/$PROJECT_NAME:dev-$DEV_VERSION .
      after_success:
        - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
        - docker push $DOCKER_USERNAME/$PROJECT_NAME:dev-$DEV_VERSION
      deploy:
        - provider: script
          script: bash .travis/deploy.sh
          env:
            VERSION=dev-$DEV_VERSION
            REMOTE_SERVER_USER=REMOTE_DEV_SERVER_USER
            REMOTE_SERVER=REMOTE_DEV_SERVER
          on:
            branch: developer
    - stage: test
      if: branch = test
      script:
        - npm run build
        - docker build -t $DOCKER_USERNAME/$PROJECT_NAME:test-$TEST_VERSION .
      after_success:
        - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
        - docker push $DOCKER_USERNAME/$PROJECT_NAME:test-$TEST_VERSION
      deploy:
        - provider: script
          script: bash .travis/deploy.sh
          on:
            branch: test
          env:
            VERSION=test-$TEST_VERSION
            REMOTE_SERVER_USER=REMOTE_TEST_SERVER_USER
            REMOTE_SERVER=REMOTE_TEST_SERVER
    - stage: production
      if: branch = master

      script:
        - npm run build
        - docker build -t $DOCKER_USERNAME/$PROJECT_NAME:production-$PROD_VERSION .
      after_success:
        - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
        - docker push $DOCKER_USERNAME/$PROJECT_NAME:production-$PROD_VERSION
